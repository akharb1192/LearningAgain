// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\ankit\go\src\LearningAgain\db\db.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	db "github.com/akharb1192/LearningAgain/db"
	gomock "github.com/golang/mock/gomock"
)

// MockDBInterface is a mock of DBInterface interface.
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface.
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance.
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockDBInterface) Exec(query string, args ...interface{}) (db.ResultInterface, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(db.ResultInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBInterfaceMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBInterface)(nil).Exec), varargs...)
}

// MockResultInterface is a mock of ResultInterface interface.
type MockResultInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResultInterfaceMockRecorder
}

// MockResultInterfaceMockRecorder is the mock recorder for MockResultInterface.
type MockResultInterfaceMockRecorder struct {
	mock *MockResultInterface
}

// NewMockResultInterface creates a new mock instance.
func NewMockResultInterface(ctrl *gomock.Controller) *MockResultInterface {
	mock := &MockResultInterface{ctrl: ctrl}
	mock.recorder = &MockResultInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultInterface) EXPECT() *MockResultInterfaceMockRecorder {
	return m.recorder
}

// LastInsertId mocks base method.
func (m *MockResultInterface) LastInsertId() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastInsertId")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastInsertId indicates an expected call of LastInsertId.
func (mr *MockResultInterfaceMockRecorder) LastInsertId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastInsertId", reflect.TypeOf((*MockResultInterface)(nil).LastInsertId))
}
